// Une classe est un mod√®le qui permet de cr√©er un ou plusieurs objet(s) = cr√©er les objets gr√¢ce au(x) mod√®le(s)
// avantage est qu'on peut s'inspirer du mod√®le ou de la classe pour modifier des d√©tails

// cr√©ation de la classe 

// class individu { 

//     prenom = "Laura"; // s'appelle une propri√©t√© dans class mais est √©gal √† une variable
//     age = 35
// }

// const laura = new individu() // cr√©ation de l'objet √† partir de la classe
// console.log(laura.prenom)

// il est possible de changer des d√©tails en cr√©ant un constructeur

// class individu {

//     constructor(prenom, age){

//         this.prenom = prenom; // on utilise this. pour associer aux propri√©t√©s de notre objet
//         this.age = age;
//     }

//     greet(){
//         return `Hello, my name is ${this.prenom} and I am ${this.age} years old.`
//     }
// }

// const laura = new individu("Laura", 35)
// const maya = new individu("Maya", 26)
// console.log(laura.greet())


//les fonctions s'appellent m√©thodes


const saveButton = document.querySelector(".save")
const confirmMessage = document.querySelector(".confirmMessage")
const totalstudents = document.querySelector(".totalStudents")
const studentsTable = [] // d√©clarer le tableau en dehors pour que cela rajoute √† chaque fois les objets dedans

class student{ // Cr√©ation d'objet(s) 

    constructor(nom, prenom, age){ // = construction de l'objet

        this.nom = nom; // = cr√©ation des propri√©t√©s (=variables)
        this.prenom = prenom;
        this.age = age;
        
    }

    isNumeric(value) { // mod√®le (=fonction) pour v√©rifier si que le champ √¢ge soit bien des chiffres
        return /^\d+$/.test(value) // Expression r√©guli√®re pour v√©rifier si la valeur est compos√©e uniquement de chiffres
    }

    addStudent(nom, prenom, age){
        if(nom.trim() !== '' && prenom.trim() !== '' && age && this.isNumeric(age)){
            studentsTable.push({nom, prenom, age})
        }
        console.log(studentsTable)  
    }

    greet(){ // = cr√©ation de mod√®les (= fonctions)
        return `Vous avez inscrit ${this.nom} ${this.prenom} √¢g√©(e) de ${this.age} ans avec succ√®s ! üôÇ`
    }

    totalStudents(table){
        return `Il y a ${table.length} √©l√®ve(s) enregistr√©(s)`
    }
}

saveButton.addEventListener('click', function(){

    const nom = document.getElementById("name")
    const prenom = document.getElementById("surname")
    const age = document.getElementById("age")

    // cr√©ation d'un nouvel √©l√®ve sur base de la construction de notre objet class Student et on pourra aller rechercher les mod√®les qui lui correspondent
    const newStudent = new student(nom.value, prenom.value, age.value)

    //v√©rification au click que le champs "√¢ge" est bien un chiffre
    if (!newStudent.isNumeric(age.value)){
        alert(`Le champ "√Çge de l'√©l√®ve" ne peut contenir que des chiffres.`)
        age.value = ""
        return // Arr√™te l'ex√©cution de la fonction si l'√¢ge n'est pas num√©rique
    }

    // ajout de l'objet "√©l√®ve" √† notre tableau
    newStudent.addStudent(nom.value, prenom.value, age.value)
    
    // on vide les champs input
    nom.value = ""
    prenom.value= ""
    age.value = ""

    // message de confirmation d'enregistrement de l'√©l√®ve
    confirmMessage.innerHTML = 
    `
    ${newStudent.greet()}
    `

    // localStorage.setItem('table', JSON.stringify(table))

    totalstudents.innerHTML = 
    `
    ${newStudent.totalStudents(studentsTable)}
    `

    

    


})